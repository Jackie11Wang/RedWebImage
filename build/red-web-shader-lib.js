/**** 创建时间为:2017-04-15 18:11:04 ****/

/**** Vertex ****/
var vertex_base = "attribute vec2 pos;\nattribute vec2 texPos;\nvarying vec2 fragCoord;\nvoid main(){\n    gl_Position = vec4(pos.xy,0.0,1.0);\n    fragCoord = texPos;\n}\n";
/**** Vertex ****/

/**** Fragment ****/
var fragment_gaussian_blur = "precision highp float;\n\nvarying vec2 fragCoord;\n\nuniform vec3 resolution;\nuniform float globalTime;\n\nuniform sampler2D iChannel0;\n\n\n\nfloat SCurve (float x) {\n    x = x * 2.0 - 1.0;\n    return -x * abs(x) * 0.5 + x + 0.5;\n}\n\nvec4 BlurH (sampler2D source, vec2 size, vec2 uv, float radius) {\n\n	if (radius >= 1.0)\n	{\n		vec4 A = vec4(0.0); \n		vec4 C = vec4(0.0); \n\n		float width = 1.0 / size.x;\n\n		float divisor = 0.0; \n        float weight = 0.0;\n        \n        float radiusMultiplier = 1.0 / radius;\n       \n		for (float x = -20.0; x <= 20.0; x++)\n		{\n			A = texture2D(source, uv + vec2(x * width, 0.0));\n            \n            weight = SCurve(1.0 - (abs(x) * radiusMultiplier)); \n            \n            C += A * weight; \n            \n			divisor += weight; \n		}\n\n		return vec4(C.r / divisor, C.g / divisor, C.b / divisor, 1.0);\n	}\n\n	return texture2D(source, uv);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord;\n	fragColor = BlurH(iChannel0, resolution.xy, uv, 20.0);\n}\n\nvoid main(){\n    mainImage(gl_FragColor,fragCoord);\n}\n";
var fragment_gray = "precision highp float;\n\nvarying vec2 fragCoord;\n\nuniform vec3 resolution;\nuniform float globalTime;\n\nuniform sampler2D iChannel0;\n\nvoid main()\n{   \n    vec4 color = texture2D(iChannel0,fragCoord);\n    mat4 gray = mat4(\n        0.3, 0.6, 0.1, 0.0,\n        0.3, 0.6, 0.1, 0.0,\n        0.3, 0.6, 0.1, 0.0,\n        0.0, 0.0, 0.0, 1.0\n    );\n    gl_FragColor = color * gray;\n}\n";
var fragment_pinch = "precision highp float;\n\nvarying vec2 fragCoord;\n\nuniform vec3 resolution;\nuniform float globalTime;\n\nuniform sampler2D iChannel0;\n\n\nuniform float r;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n	vec2 uv = fragCoord;\n\n    vec2 center = vec2( 0.5 );\n    vec2 dir = normalize( center - uv );\n    float d = length( center - uv );\n    float factor = r * -0.5;\n    float f = exp( factor * ( d - 0.5 ) ) - 1.0;\n    if( d > 0.5 ) {\n        f = 0.0;\n    }\n  \n    fragColor = texture2D( iChannel0, uv + f * dir );\n}\n\n\n\nvoid main()\n{   \n    mainImage(gl_FragColor,fragCoord);\n}\n";
var fragment_sobel = "precision highp float;\n\nvarying vec2 fragCoord;\n\nuniform vec3 resolution;\nuniform float globalTime;\n\nuniform sampler2D iChannel0;\n\n\nuniform float r;\n\n\n\nvec3 brightness = vec3(0.2126, 0.7152, 0.0722);\n\nfloat rgb2gray(vec3 color) {\n    return dot(color.rgb, brightness);\n}\n\nfloat pixel_operator(float dx, float dy) {\n    vec4 rgba_color = texture2D( iChannel0, fragCoord + vec2(dx,dy) );\n    return rgb2gray(rgba_color.rgb);\n}\n\n//Sobel算子\nfloat sobel_filter()\n{\n    float dx = (r * 1.0) / float(resolution.x);\n    float dy = (r * 1.0) / float(resolution.y);\n\n    float s00 = pixel_operator(-dx, dy);\n    float s10 = pixel_operator(-dx, 0.0);\n    float s20 = pixel_operator(-dx, -dy);\n    float s01 = pixel_operator(0.0, dy);\n    float s21 = pixel_operator(0.0, -dy);\n    float s02 = pixel_operator(dx, dy);\n    float s12 = pixel_operator(dx, 0.0);\n    float s22 = pixel_operator(dx, -dy);\n\n    float sx = s00 + 2.0 * s10 + s20 - (s02 + 2.0 * s12 + s22);\n    float sy = s00 + 2.0 * s01 + s02 - (s20 + 2.0 * s21 + s22);\n\n    float mag = length(vec2(sx, sy));\n\n    return mag;\n}\n\nvoid main(){\n    float graylevel = sobel_filter();\n    gl_FragColor = vec4(graylevel, graylevel, graylevel, 1.0);\n}\n";
var fragment_zoomblur = "precision highp float;\n\nvarying vec2 fragCoord;\n\nuniform vec3 resolution;\nuniform float globalTime;\n\nuniform sampler2D iChannel0;\n\n\nfloat perspective = 0.3;\n\nconst int samples = 200;\nconst float minBlur = 0.1;\nconst float maxBlur = 0.3;\nconst float speed = 3.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n	vec2 p = fragCoord;\n	\n    vec4 result = vec4(0);\n    \n    float timeQ = mix(minBlur, maxBlur, 0.5);\n    \n	for (int i=0; i<=samples; i++)\n    {        \n        float q = float(i)/float(samples);\n        result += texture2D(iChannel0, p + (vec2(0.5)-p)*q*timeQ)/float(samples);\n    }\n    \n	fragColor = result;\n}\n\n\n\nvoid main()\n{   \n    mainImage(gl_FragColor,fragCoord);\n}\n";
/**** Fragment ****/
